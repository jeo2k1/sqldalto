***CREAR BASE DE DATOS
    CREATE DATABASE "BASEUSUARIOS"

***CREAR TABLA
    CREATE TABLE "usuarios"{
        "campo"    TEXT DEFAULT 'Jorge',
        "id usuario"	INTEGER,
        "nombre"	TEXT,
        "apellido"	TEXT,
        "edad"	INTEGER,
        PRIMARY KEY("id usuario" AUTOINCREMENT)
    };

***CONSULTA PARA TRAER TODOS LOS REGISTROS
    SELECT * FROM usuarios

***INSERTAR 1 REGISTRO A LA TABLA
    INSERT INTO usuarios (nombre, apellido, edad)
    VALUES('Jorge','Orellana',45)

***INSERTAR VARIOS REGISTROS A LA TABLA
    INSERT INTO usuarios (nombre, apellido, edad)
    VALUES('Pedro','Jorgelin',26),
          ('Juan','Alvarez',16),
          ('Roberto','Ntito',52)

***CONSULTA POR CAMPOS ESPECIFICOS DE LA TABLA
    SELECT apellido,edad FROM usuarios

***BORRAR TODOS LOS REGISTROS DE UNA TABLA
    DELETE FROM usuarios

***MAS DE UNA CONSULTA (SEPARADA POR ;)
    INSERT INTO usuarios (nombre, apellido, edad)
    VALUES('Jorge','Orellana',45);
	
	SELECT * FROM usuarios
 
***ALIAS
    SELECT LastName AS apellido, FirstName AS nombre FROM Employees

***OPERACION CON CAMPOS Y ASIGNA UN ALIAS
    SELECT Price, Price*2 AS precio_doble FROM Products

***ORDENAR ASCEDENTE Y DESCENDENTE
    SELECT * FROM Products
    ORDER BY Price ASC
    ORDER BY Price DESC

***ORDENAR ASCEDENTE Y DESCENDENTE PONIENDO NULLS AL INICIO O AL FINAL
    SELECT * FROM Products
    ORDER BY ProductName ASC NULLS LAST

***ORDENAR RANDOM
    SELECT * FROM Products
    ORDER BY RANDOM()

***ORDENAR POR 2 CAMPOS
    SELECT * FROM Products
    ORDER BY ProductName, SupplierID DESC

***MOSTRAR UN SOLO VALOR DE CADA COLUMNA
    SELECT DISTINCT ProductName
    FROM Products ORDER BY ProductName ASC

***CLASUSULA WHERE
    SELECT	ProductName FROM Products
    WHERE ProductID = 14

***ELIMINAR UN REGISTRO ESPECIFICO
    DELETE FROM turnos_medicos
    WHERE id_turno = 3

*** ACTUALIZAR UN REGISTRO
    UPDATE turnos_medicos
    SET horario = "10:30"
    motivo = "Dolor de muela"
    WHERE id_turno = 2

***CLASUSULA AND
    SELECT * FROM Customers
    WHERE  CustomerID >= 50 AND CustomerID < 55    

***CLASUSULA OR
    SELECT * FROM Employees
    WHERE FirstName = "Nancy" OR FirstName = "Anne"

***CLASUSULA OR y AND
    SELECT * FROM Products
    WHERE (Price < 20 OR CategoryID = 6) AND (SupplierID = 7)

***CLASUSULA NOT
    SELECT * FROM Products
    WHERE NOT Price > 40

***OPERADOR BETWEEN
    SELECT * FROM Products WHERE Price BETWEEN 20 AND 40

***OPERADOR LIKE
    SELECT * FROM Employees WHERE LastName LIKE "Fuller"

***OPERADOR LIKE CON COMODIN %
    SELECT * FROM Employees WHERE LastName LIKE "F%"

***OPERADOR LIKE CON COMODIN _
    SELECT * FROM Employees WHERE LastName LIKE "Full__"

***OPERADOR IS NULL
    SELECT * FROM Products
    WHERE ProductName IS NULL
    ORDER BY ProductName ASC
    
***OPERADOR IS NOT NULL
    SELECT * FROM Products
    WHERE ProductName IS NOT NULL
    ORDER BY ProductName ASC

***OPERADOR IN
    SELECT * FROM Products
    WHERE SupplierID IN (3,4,5,6)


***OPERADOR NOT IN
    SELECT * FROM Products
    WHERE SupplierID NOT IN (3,4,5,6)

***FUNCION DE AGREGACION COUNT(), SUM(), AVG(), ROUND(), MIN(), MAX()
    SELECT count(FirstName) AS Cantidad_de_nombres FROM  Employees
    SELECT sum(Price) FROM Products
    SELECT ROUND(AVG(Price),2) as promedio FROM Products
    SELECT ProductName min(Price) FROM Products
    SELECT ProductName MAX(Price) FROM Products

***COMENTARIO EN SQL
    -- comentario en SQL    

***GROUP BY
    SELECT CategoryID,round(AVG(Price)) as promedio FROM Products
    WHERE CategoryID IS NOT NULL
    GROUP BY CategoryID

***GROUP HAVING
    SELECT ProductID, SUM(Quantity) AS total FROM OrderDetails
    GROUP BY ProductID
    ORDER BY total DESC
    LIMIT 1

***

***