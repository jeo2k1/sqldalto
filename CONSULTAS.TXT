***CREAR BASE DE DATOS
    CREATE DATABASE "BASEUSUARIOS"

***CREAR TABLA
    CREATE TABLE "usuarios"{
        "campo"    TEXT DEFAULT 'Jorge',
        "id usuario"	INTEGER,
        "nombre"	TEXT,
        "apellido"	TEXT,
        "edad"	INTEGER,
        PRIMARY KEY("id usuario" AUTOINCREMENT)
    };

***CONSULTA PARA TRAER TODOS LOS REGISTROS
    SELECT * FROM usuarios

***INSERTAR 1 REGISTRO A LA TABLA
    INSERT INTO usuarios (nombre, apellido, edad)
    VALUES('Jorge','Orellana',45)

***INSERTAR VARIOS REGISTROS A LA TABLA
    INSERT INTO usuarios (nombre, apellido, edad)
    VALUES('Pedro','Jorgelin',26),
          ('Juan','Alvarez',16),
          ('Roberto','Ntito',52)

***CONSULTA POR CAMPOS ESPECIFICOS DE LA TABLA
    SELECT apellido,edad FROM usuarios

***BORRAR TODOS LOS REGISTROS DE UNA TABLA
    DELETE FROM usuarios

***MAS DE UNA CONSULTA (SEPARADA POR ;)
    INSERT INTO usuarios (nombre, apellido, edad)
    VALUES('Jorge','Orellana',45);
	
	SELECT * FROM usuarios
 
***ALIAS
    SELECT LastName AS apellido, FirstName AS nombre FROM Employees

***OPERACION CON CAMPOS Y ASIGNA UN ALIAS
    SELECT Price, Price*2 AS precio_doble FROM Products

***ORDENAR ASCEDENTE Y DESCENDENTE
    SELECT * FROM Products
    ORDER BY Price ASC
    ORDER BY Price DESC

***ORDENAR ASCEDENTE Y DESCENDENTE PONIENDO NULLS AL INICIO O AL FINAL
    SELECT * FROM Products
    ORDER BY ProductName ASC NULLS LAST

***ORDENAR RANDOM
    SELECT * FROM Products
    ORDER BY RANDOM()

***ORDENAR POR 2 CAMPOS
    SELECT * FROM Products
    ORDER BY ProductName, SupplierID DESC

***MOSTRAR UN SOLO VALOR DE CADA COLUMNA
    SELECT DISTINCT ProductName
    FROM Products ORDER BY ProductName ASC

***CLASUSULA WHERE
    SELECT	ProductName FROM Products
    WHERE ProductID = 14

***ELIMINAR UN REGISTRO ESPECIFICO
    DELETE FROM turnos_medicos
    WHERE id_turno = 3

*** ACTUALIZAR UN REGISTRO
    UPDATE turnos_medicos
    SET horario = "10:30"
    motivo = "Dolor de muela"
    WHERE id_turno = 2

***CLASUSULA AND
    SELECT * FROM Customers
    WHERE  CustomerID >= 50 AND CustomerID < 55    

***CLASUSULA OR
    SELECT * FROM Employees
    WHERE FirstName = "Nancy" OR FirstName = "Anne"

***CLASUSULA OR y AND
    SELECT * FROM Products
    WHERE (Price < 20 OR CategoryID = 6) AND (SupplierID = 7)

***CLASUSULA NOT
    SELECT * FROM Products
    WHERE NOT Price > 40

***OPERADOR BETWEEN
    SELECT * FROM Products WHERE Price BETWEEN 20 AND 40

***OPERADOR LIKE
    SELECT * FROM Employees WHERE LastName LIKE "Fuller"

***OPERADOR LIKE CON COMODIN %
    SELECT * FROM Employees WHERE LastName LIKE "F%"

***OPERADOR LIKE CON COMODIN _
    SELECT * FROM Employees WHERE LastName LIKE "Full__"

***OPERADOR IS NULL
    SELECT * FROM Products
    WHERE ProductName IS NULL
    ORDER BY ProductName ASC
    
***OPERADOR IS NOT NULL
    SELECT * FROM Products
    WHERE ProductName IS NOT NULL
    ORDER BY ProductName ASC

***OPERADOR IN
    SELECT * FROM Products
    WHERE SupplierID IN (3,4,5,6)


***OPERADOR NOT IN
    SELECT * FROM Products
    WHERE SupplierID NOT IN (3,4,5,6)

***FUNCION DE AGREGACION COUNT(), SUM(), AVG(), ROUND(), MIN(), MAX()
    SELECT count(FirstName) AS Cantidad_de_nombres FROM  Employees
    SELECT sum(Price) FROM Products
    SELECT ROUND(AVG(Price),2) as promedio FROM Products
    SELECT ProductName min(Price) FROM Products
    SELECT ProductName MAX(Price) FROM Products

***COMENTARIO EN SQL
    -- comentario en SQL    

***GROUP BY
    SELECT CategoryID,round(AVG(Price)) as promedio FROM Products
    WHERE CategoryID IS NOT NULL
    GROUP BY CategoryID

***GROUP HAVING
    SELECT ProductID, SUM(Quantity) AS total FROM OrderDetails
    GROUP BY ProductID
    ORDER BY total DESC
    LIMIT 1

***SUBSCONSULTAS
    SELECT ProductID,
            Quantity,
            (SELECT ProductName FROM Products WHERE OD.ProductID = ProductID) AS nombre
    FROM OrderDetails AS OD

***EJERCICIO SUBSCONSULTAS
    SELECT FirstName, LastName,
    (SELECT SUM(OD.Quantity) FROM Orders AS O, OrderDetails AS OD
    WHERE O.EmployeeID = E.EmployeeID AND OD.OrderID = O.OrderID) AS UNIDADES_TOTALES
    FROM Employees AS E
    WHERE UNIDADES_TOTALES < (SELECT AVG (UNIDADES_TOTALES) FROM (
    SELECT (SELECT SUM(OD.Quantity) FROM Orders AS O, OrderDetails AS OD
    WHERE O.EmployeeID = E2.EmployeeID AND OD.OrderID =O.OrderID) AS UNIDADES_TOTALES 
    FROM Employees AS E2
    GROUP BY E2.EmployeeID
    ) )

***JOINS, CROSS JOIN, INNER JOIN
    --CROSS JOIN
    SELECT LastName, FirstName, OrderID FROM Employees E


    -- INNER JOIN
    INNER JOIN ORDERS O ON E.EmployeeID = O.EmployeeID

*** CREAR TABLA NUEVA
    CREATE TABLE "Rewards" (
        "Rewardid"	INTEGER,
        "EmployeeID" INTEGER,
        "Reward"	INTEGER,
        "Month"		INTEGER,
        PRIMARY KEY("Rewardid" AUTOINCREMENT)
    )

***LEFT JOIN
    SELECT FirstName,Reward,Month FROM Employees E
    LEFT JOIN Rewards R ON E.EmployeeID = R.EmployeeID

***RIGTH JOIN (INVERTIMOS LAS TABLAS)
    -- SIMULANDO UN RIGHT JOIN INVIRTIENDO LAS TABLAS Rewards Y Employees
    SELECT FirstName,Reward,Month FROM Rewards R
    LEFT JOIN Employees E ON E.EmployeeID = R.EmployeeID

***FULL JOIN (UNION)
    -- SIMULANDO UN FULL JOIN UNIENDO UN LEFT JOIN CON UNA SIMULACION DE RIGHT JOIN
    SELECT FirstName,Reward,Month FROM Employees E
    LEFT JOIN Rewards R ON E.EmployeeID = R.EmployeeID

    UNION

    -- SIMULANDO UN RIGHT JOIN INVIRTIENDO LAS TABLAS Rewards Y Employees
    SELECT FirstName,Reward,Month FROM Rewards R
    LEFT JOIN Employees E ON E.EmployeeID = R.EmployeeID


***(UNION ALL)
    -- SIMULANDO UN FULL JOIN UNIENDO UN LEFT JOIN CON UNA SIMULACION DE RIGHT JOIN
    SELECT FirstName,Reward,Month FROM Employees E
    LEFT JOIN Rewards R ON E.EmployeeID = R.EmployeeID

    UNION ALL

    -- SIMULANDO UN RIGHT JOIN INVIRTIENDO LAS TABLAS Rewards Y Employees
    SELECT FirstName,Reward,Month FROM Rewards R
    LEFT JOIN Employees E ON E.EmployeeID = R.EmployeeID

***CARDINALIDAD
    1 A 1 (1:1)
    1 A MUCHOS (1:N)
    MUCHOS A 1 (N:1)
    MUCHOS A MUCHOS (N:M) (SE USA TABLA INTERMEDIA)

***NORMALIZACION
    1FN
    2FN
    3FN
    4FN
    https://es.wikipedia.org/wiki/Normalizaci%C3%B3n_de_bases_de_datos

***INDICES
    INDICES ORDINARIOS NO UNICOS (PERMITE DUPLICADOS Y VACIOS)
    --creando un indice de Products
    CREATE INDEX nombre ON Products (ProductName)

    INDICES UNICOS (NO PERMITE DUPLICADOS)
    --creando un indice name de Employees compuesto
    CREATE UNIQUE INDEX name on Employees (FirstName, LastName)

    EJERCICIO INDICES
    *****************
    SELECT * FROM OrderDetails od
    INNER JOIN Orders o
    WHERE o.OrderID = od.OrderID
    AND OrderDate > "1996-07-04"
    AND od.Quantity > 10

    CREANDO INDICES
    ***************
    CREATE INDEX idx_orderdetails_quantity ON OrderDetails (Quantity);
    CREATE INDEX idx_orders_ordersdate ON Orders(OrderDate)

***VISTAS
    CREATE VIEW Prodcutos_simplificados AS

    SELECT ProductID, ProductName, Price FROM Products
    WHERE ProductID > 20
    ORDER BY ProductID DESC
    
    EJECUTAR VISTAS
    ***************
    SELECT * FROM Prodcutos_simplificados

    ELIMINAR VISTAS
    ***************
    DROP VIEW IF EXISTS Prodcutos_simplificados

***BLOQUEOS Y TRANSACCIONES
    BLOQUEOS COMPARTIDOS (SHARED LOCKS, NADIE PUEDE ESCRIBIR PERO TODOS PUEDEN LEER, SE EJECUTA CUANDO LEEMOS LA BD)
    BLOQUEOS RESERVADO (RESERVED LOCKS, NADIE PUEDE ESCRIBIR PERO TODOS PUEDEN LEER, SE EJECUTA CUANDO ESCRIBIMOS LA BD)
    BLOQUEO EXCLUSIVO (EXCLUSIVE LOCKS, NADIE PUEDE LEER NI ESCRIBIR, SE EJECUTA CUANDO ESCRIBIMOS LA BD)

    EJEMPLOS
    ********
    BEGIN
    DELETE FROM Products WHERE 0;

    UPDATE
    ******
    BEGIN TRANSACTION;

    UPDATE Products SET ProductName = "JeO" WHERE ProductName = "Chais";

    COMMIT

    ROLLBACK

***PROCEDIMIENTOS ALMACENADOS 

***FUNCIONES DEFINIDAS POR EL USUARIO 






